Given a string A of size N, find and return the longest palindromic substring in A.

Substring of string A is A[i...j] where 0 <= i <= j < len(A)

Palindrome string:
A string which reads the same backwards. More formally, A is palindrome if reverse(A) = A.

Incase of conflict, return the substring which occurs first ( with the least starting index)

Code:
class Solution:
    # @param A : string
    # @return a strings
    def longestPalindrome(self, A):
        

        ans = 0
        start = -1
        end = -1
        for i in range(len(A)):
            l = i
            r = i

            while l>=0 and r<len(A):
                if A[l]!=A[r]:
                    break
                l-=1
                r+=1
                if r-l-1 > ans:
                    start = l+1
                    end = r-1
                    ans = max(ans,r-l-1)

        for j in range(len(A)-1):
            l = j
            r = j+1

            while l>=0 and r<len(A):
                if A[l]!=A[r]:
                    break
                l-=1
                r+=1
                if r-l-1>ans:
                    start = l+1
                    end = r-1
                    ans = max(ans,r-l-1)


        return A[start:end+1]



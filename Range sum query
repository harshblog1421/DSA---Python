You are given an integer array A of length N.
You are also given a 2D integer array B with dimensions M x 2, where each row denotes a [L, R] query.
For each query, you have to find the sum of all elements from L to R indices in A (0 - indexed).
More formally, find A[L] + A[L + 1] + A[L + 2] +... + A[R - 1] + A[R] for each query.

Code:

class Solution:
    # @param A : list of integers
    # @param B : list of list of integers
     # @return an list of long
    def rangeSum(self, A, B):
        n = len(A)
        psum = [0]*len(A)
        psum[0] = A[0]
        for i in range(1,len(A)):
            psum[i]= psum[i-1]+A[i]

        result_array =[]
        for i in range(len(B)):
            l = B[i][0]
            r = B[i][1]
            result = 0

            if l==0:
                result = psum[r]
            else:
                result = psum[r]-psum[l-1]

            result_array.append(result)

        return result_array

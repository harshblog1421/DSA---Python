Given a binary string A. It is allowed to do at most one swap between any 0 and 1. Find and return the length of the longest consecutive 1â€™s that can be achieved.

Code:

class Solution:
    # @param A : string
    # @return an integer
    def solve(self, A):
       # To count all 1's in the string
        count_one = 0
        n = len(A)
 
        for i in range(len(A)):
            if A[i]=='1':
                count_one +=1

        left = [0]*n
        right = [0]*n

        if A[0]== '1':
            left[0]=1

        if A[n-1]== '1':
            right[n-1]=1

        for j in range(1,len(A)-1):
            if A[j]=='1':
                left[j]=left[j-1]+1

        for j in range(n-2,-1,-1):
            if A[j]=='1':
                right[j]=right[j+1] +1

        max_count = 0
        for i in range(n):
            max_count = max(max_count,max(left[i],right[i]))

        for i in range(1,n-1):
            if A[i]=='0':
                count = left[i-1]+right[i+1]
                if count < count_one:
                    count+=1

                max_count = max(max_count,count)

        return max_count
        
        
